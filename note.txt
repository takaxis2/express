미들웨어
 - express가 실행되면서 들어온 어떤 request가 응답이 되어 나갈때까지 거치는 모든 함수
 - express 자체가 함수들을 거치는 구조이고 각 함수 하나하나를 미들웨어라 본다
 - 인자 : req, res, next(미들웨어가 언제끝날지 모르기 때문에 next()를 해줘야함)
 - 한번에 순서대로 쭉 붙여 쓸 수도 있다.
    ex) app.use("/", (req, res, next) => {
            console.log("Middleware 1");
            },(req,res,next)=>{
                console.log("Middleware 1.2");
            });
 - 뒤쪽 미들웨어에 값을 넘겨주는 방법
    : req에 mutation을 주면 뒤쪽에서도 사용가능하다
    : ex) req.requesredAt = requesredAt; || req.body = body;
 - async 미들웨어 
    : async(req, res, next)이런 식으로 사용
    : 안쪽에서 await사용가능


라우팅
 - app.use()에 path pattern, regex, array등을 사용
    path pattern:
        ab?cd : acd || abcd, b가 있거나 없거나
        ab+cd : abcd || abbcd || abbbcd, b가 몇번이나 반복되거나
        ab*cd : abcd || ab_cd || abbbcd, ab와 cd사이에 무엇이든
        a(bc)?d : 괄호로 묶어서 하나의 토큰으로 사용
    regex:
        /abcd/ : abcd를 포함하는가
        /abcd$/ : abcd로 끝나야한다
        /^\abcd/ : \으로 특수기호 처리, abcd로 시작해야함
    array
     ['/abcd','xyz'], 배열 안의 경로를 사용
 - 라우터
    const userRouter = express.Router();
    userRouter.param("id", (req, res, next, value))
        : userRouter에 파라미터로 들어온 값은 4번째 인수로 전해진다, 얘도 미들웨어

bodyParser
 - req의 body를 parsing해준다 
 - bodyparser.json()등 원하는 형태로 받을 수 있다
 - 요즘에는 express.json 사용, express 자체적으로 지원


템플릿 엔진 PUG
 - npm i pug 
 - mime 타입?
 - req.accept([]) : req로 들어온 데이터가 어떤 형식인지 확인하고 알맞은 값을 리턴


static 파일 서빙
 - app.use(express.static("src/public"))
    : 위쪽에 위치할 경우에 만약 주소값과 내부 파일 경로가 일치할 경우, 파일이 다운로드 된다
    : 해결책 1, 밑으로 옮긴다
    : 해결책 2, app.use("/public", express.static("src/public")), 
        prefix를 주어서 /public이 들어갈때만 실행 -> localhost:5000/public/users/15 이런식으로 하면 전처럼 파일이 다운된다


에러 헨들링
 - try / catch ?
 - throw new Error('하고 싶은 말') || 에러 객체를 생성, statusCode를 설정후 붙여서 throw
 - 미들웨어로 처리가능
    : app.use((err,req,res,next)=>{})
    : 여기서 throw된 에러 객체를 받을 수 있고, err.statusCode로 res.statusCode 수정
    : 4개의 인자를 받는 경우에만 에러 핸들링 미들웨어로 취급
 - async로 할경우 try/catch로 해야 함, promise 핸들링이 안돼서 터짐
    : next()에 인자를 넣어주면 에러가 된다

API testing
 - jest
    : app.spec.js 등 중간에 spec을 넣어서 파일을 생성
    : expect().toBe() 등으로 조건?과 결과값을 넣는다
    : package.json에 scripts에 "test":"jest" 추가
    : jest에선 함수를 다 async로 만들 수 있다(await붙히기 쌉가능)
 - supertest
 - import/export 안되는 문제
    : .babelrc 만들고
    {
         "env": {
            "test": {
            "plugins": ["@babel/plugin-transform-modules-commonjs"]
            }
        }   
    } 쓴다
    : npm i @babel/plugin-transform-modules-commonjs 한다
 - export default는 import로 받아야하고, module.exports는 require로 받아야 작동한다 
 - [ERR_MODULE_NOT_FOUND]는 확장자를 안써서 생기는 경우

이미지 업로드
 - form에서 enctype="multpart-data"로 설정
 - npm i multer 설치, 데이터를 파싱해준다

MongoDB
 - 환경변수로 패스워드 사용시 dotenv패키지 없으면 오류남
 - RDB의 경우 one to many관계를 사용할때 collection/table을 새로 만들지만
   noSQL의 경우 임베딩을 한다(한 collection에 더 때려박는다) -> join이 더 힘들고 무거움, 제약사항이 있다
 - 임베딩 제약사항
      : 한 document의 최대 사이즈는 16mb이다
      : nesting(중첩, 밑에 밑에 밑에)는 100개 이상x
 - nesting된거 찾는법
      : dot-notation으로 찾을 수 있다
      : await users.find({'contacts.type':'phone'})이런식
 - many to many관계 : 이런 경우는 collection을 따로 만드는게 더 좋다
   const cursor = users.aggregate([
       {
         $lookup: { from: "cities" },
         localField: "city",
         foreignField: "name",
         as: "city_info",
      },
   ]);
   : cities라는 collection에서 users collection의 city라는 field에 cities의 name field 값을 city_info로 붙여서 보여주겟다
   : RDM의 join느낌
   : 인수로 파이프라인을 받는데 배열의 형태로 오브젝트를 넘길 수 있다, 오브젝트들은 특정 작업을 하며 순서대로 거쳐가고 결과를 리턴
   : $match에서 안쪽에 $and:[]을 넣고 그 안에 조건들을 넣으면 다 걸러져서 나온다 $or도 있다
   : $count: "num_users"로 몇개인지도 확인가능